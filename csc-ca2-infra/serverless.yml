service: csc-ca2-infra

frameworkVersion: "2"

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    shouldStartNameWithService: true
  role:
    Fn::GetAtt:
      - LambdaRole
      - Arn
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  backend:
    handler: handlers/backend.handler
    events:
      - http:
          path: /api/{proxy+}
          method: any
    environment:
      STRIPE_PUBLISHABLE_KEY: ${self:custom.envfile.stripe_publishable_key, ''}
      STRIPE_SECRET_KEY: ${self:custom.envfile.stripe_secret_key, ''}
      STRIPE_WEBHOOK_SECRET: ${self:custom.envfile.stripe_webhook_secret, ''}
      FREE_PRICE_ID: ${self:custom.envfile.free_price_id, ''}
      PRO_PRICE_ID: ${self:custom.envfile.pro_price_id, ''}
      URL: ${self:custom.envfile.stripe_url, ''}
      STRIPE_API_VERSION: ${self:custom.envfile.stripe_api_version, ''}
      RDS_HOST: ${self:custom.envfile.rds_host, ''}
      RDS_USER: ${self:custom.envfile.rds_user, ''}
      RDS_PASSWORD: ${self:custom.envfile.rds_password, ''}
      RDS_DATABASE: ${self:custom.envfile.rds_database, ''}
      OAUTH_CLIENT_ID: ${self:custom.envfile.oauth_client_id, ''}
      OAUTH_CLIENT_SECRET: ${self:custom.envfile.oauth_client_secret, ''}
  frontend:
    handler: handlers/frontend.handler
    events:
      - http:
          path: /
          method: any
      - http:
          path: /{proxy+}
          method: any

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

plugins:
  - serverless-layers
  - serverless-s3-deploy
custom:
  envfile: ${file(env.yml)}
  serverless-layers:
    layersDeploymentBucket: csc-ca2-layers-dep-teh # Bucket name to be changed
    packageManager: pip
    dependenciesPath: requirements.txt
  assets:
    # auto: true
    targets:
      - bucket: csc-ca2-static-teh # Bucket name to be changed
        empty: true
        files:
          - source: static/
            globs:
              - "**/*"

resources:
  Resources:
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CSC-CA2-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        Policies:
          - PolicyName: dynamodb-access
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                    - dynamodb:Scan
                  Resource:
                    - Fn::Join:
                        - ":"
                        - - arn:aws:dynamodb
                          - ${self:provider.region}
                          - Ref: AWS::AccountId
                          - table/user-info-dev
                    - Fn::Join:
                        - ":"
                        - - arn:aws:dynamodb
                          - ${self:provider.region}
                          - Ref: AWS::AccountId
                          - table/session-info-dev
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - s3:GetObjects
        #         Resource:
        #           - Fn::Join:
        #             - ":"
        #             - - arn:aws:s3:
        #               - ${self:provider.region}
        #               - Ref: AWS::AccountId
        #               - examplebucket

    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: csc-assignment-photo-bucket-teh # Bucket name to be changed
        AccessControl: PublicRead

    PhotoBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref PhotoBucket
                  - /*
        Bucket: !Ref PhotoBucket

    UserInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user-info-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: S
        KeySchema:
          - AttributeName: userID
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10

    SeshInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: session-info-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: sessionToken
            AttributeType: S
        KeySchema:
          - AttributeName: sessionToken
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10

    CscAssignment2DBInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: ${self:custom.envfile.rds_database, ''}${self:provider.stage}
        AllocatedStorage: 10
        Engine: mysql
        EngineVersion: 5.7
        MasterUsername: ${self:custom.envfile.rds_user, ''}
        DBInstanceClass: db.t3.small
        MasterUserPassword: ${self:custom.envfile.rds_password, ''}
        VPCSecurityGroups:
          - !GetAtt DBEC2SecurityGroup.GroupId
    DBEC2SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Open database for access
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: "3306"
            ToPort: "3306"
            SourceSecurityGroupId: ${self:custom.envfile.rds_sg_id, ''}

  Outputs:
    UserInfoTableARN:
      Value:
        Fn::GetAtt:
          - UserInfoTable
          - Arn

    SeshInfoTableARN:
      Value:
        Fn::GetAtt:
          - SeshInfoTable
          - Arn
